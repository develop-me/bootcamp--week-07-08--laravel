%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 627.000000 627.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 627 627
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 627 627
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Feijoa-Medium
%!FontType1-1.0: Feijoa-Medium 001.001%%CreationDate: 12/17/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Feijoa-Medium) readonly def/FamilyName (Feijoa Medium) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -80 def/UnderlineThickness 40 defend readonly def/FontName /Feijoa-Medium def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /S putdup 34 /e putdup 35 /r putdup 36 /v putdup 37 /W putdup 38 /b putdup 39 /space putdup 40 /A putdup 41 /p putdup 42 /H putdup 43 /T putdup 44 /P putdup 45 /R putdup 46 /q putdup 47 /u putdup 48 /s putdup 49 /t putdup 50 /o putdup 51 /n putdup 52 /i putdup 53 /O putdup 54 /d putreadonly def/FontBBox {-128 -334 2318 1001} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF6DDB462BE17009F2F261B5320C83C58DE85AC0ACE29E3D90B1295618628CE6CF86E506265A524075CBC64D73877D7EB7C120B802E775B8873BBF0C51DC69F292EC74C8222E98EEB1B61B222E253CE88D13383D1E6D8BA85D3FC59C2B4B2CBD5D4ADD4C19305984F559F01473372C0C5D4DC96547235BD2DC4C7727A8CF78849D3368DF87533F6580207514F6673BFA4C8F84454B17BA1DA92D790298BF6AF530427BEBDEA4773D2F6051F5130ED1C8B2246BD6C0166CA3421C26BA386453EF5D965F3C71C88BA5B60A45C669430BD88C473E1B21A90F2EA649309393E2F16AA3F986EE1304F199BE2EE6512C331BABE351B0884A556EECACF770091CB1DC4E782899D63E02103AA16847DB49566AE28F934C5347D96FB081D5798CCEF5D0556532F59ABBF95D937799A0AB1B6AE47130CDE98F176A58A6E5FD04D09B3FE4472DC4545F51564217391ED6A7BA13A026CB37B0FCC347197C11AFF96AA78836998E1FA585829F8F2DF03FD09B58A5D87E970D2409C75597A7AEAE21F24A89CD08F4DBC4EB59025F0C79A12D01123A229829A11A41B6E15E21558D3F043DCFE79365745566F4A202F3DE7F2703AF6A019BEC10D967B3A35D024BEA962AE34289ED63868C9611DBAD3F96067CF8986E5A0073DA1DC9BA3EC3D6BB0929C0AC7A2E104DE8621B79EBDFC3E02DCF52CFA6A47C04F306F58120EA70DAF8EE1A9B4984535EEB4ABE6C452908EDA9492FD3CE87E7D320D065FFB4E6AD01D102C104DDAF73EB8EFE373DD1ABBA9637C1F07EB71A49239E748B85A1EB807711A8C0CEE8F6DA1A957E706E56BFF82C7B71683F464783AA3503DD646FFF8CE721BCF17A58ECE301743BF0ACFA363A13730F4F025BC938832482AC1F5541FF2408ED3076DBAC1A2B9F192E786BD108922ACC3D5A9FF47537E303D1BE43C196837DB83FB71A3502E64077B859220DFA7F75D08D0A2817BF8AD39F3597584D933F10E4AE457F65AFF1516DBB8D28F3AA6BCFE7229D935B1C14F465182F40F510E37ADF09E4746ACCC69212B474EBB26D3106F85862F7E9AC25EC762271FE6E7963BEF872C86B5C041E3C5DE7E3F4D0ED5012DBFF0C06745A36F338BA1B2D06F94C50CB662BEFAEB6CB309ECD709386464507AA21A649B383CCEEDC1746D5395D1F864836E906AC688B105D036ED5695003C80979B75E571B02088EEA5C4249B79A15CC9053AFEBD7AF7180344C3C5C34C26329D2EF950C802021D8CF806A7858832EDCDD6E0F0C96865DB06B08929A76C24E2A764F6D0545555C964294D8D8CB7700F48C445F0E47A3F8767191F9C831CB5AACB3425B95D7A30FD186C5FE883AC6EDCF34B4BC99E2068E9765A11BF6571CB41A13751D070EEECD8860D8E574921F4A4E2FBF22617AEFEB9BF2560AAD6A514F38975761E37E4325555A967DA6A55CF50E21A48012BA48F2D09AADE219D797A04F76D9F35411D8A418D2EEF87A09FA4F0FE221E53692AD78A0C266ABA4F0434E62E85514AE883124CF5C7D4B92969B61D4FD177CC579E7A74A5115F062E934253B7F644A9DB5900CEBB12FDD7D43E42A5EF32122BB3E55EA28719A02986F99352F74769282D6E22713A6BA6EAF552C6A4FE51F72869E0623F147101D0DCCC1BD31C98622B74C08B4F9C84D827332113F63F412D40DFBD12C3B04A0F2F75DC6D683616629A3874C9F9BC8B4B1DEBEC59B4872422BBF902ACB9CA3F0182CD3E8A0F7C1B5D8E79F91967AF010C8E3A8931E1E4C4655CB0E78BE6243073E2AF3C3E45421BEAEDC59346C4B4883F1627E3AB91BCC071F712756472D87539338A1F065B45ADD328198AAB1CBF6D6DED7BB6E2ACBDBB432B67FCCE8F89D6308BA2B528F25DF064116C44390309B45E8B3E7EE8B40254CBF411B939931BCC1F96F1F348F952FE0A91C9434EA6DE2E55C4A26F081CB6A1F510B627EC912BAB1116E6BC5A5CFDD615ABDA5E3E617540B2241F435B9E207C86B71C70ECFB3CBE61A0607AFB88F58CC4A23E0C306776ED13E24A55CC3E254820833A28CCD16ED767B4C6CD3B0D0ACFF9303B8FE9D2424E0860403D1981DC44D8481E38C0CB9220FB507E805B19DB72BEB1818BF3949536806AF8916FA731E0684E0FF914595E406538608472542B278C3E3E9CF8D8F7FF133329A7AE09D728752D8497A05F2E4A509DBD5B97188CFA940F61111F7FFF5B22B996BB87ABECEF11A4A831F2DCE6C2B39B9BF9970799F0C499D3A5D842133CC8A580B40E0062C825EBA6714833702BAAC416F8BF1E166C43A66B05295793B2C5CFF1C9417F2639238E02DC558182A0B293CE622371684893FDF241932B93DA4B590E997BC8DBD6491B62F3CE3AF2DB2DB24160FE5F1A32803D7740B953EBDCA0EEC97F88C8E15F1FEB196D7FE680A21936146FB962BABB0D1F539ADBA33983279C5549FD41EC85A6BBEBCDEA0C041FFA6147D719C88023003DE7835140251BFAFAFF165BCFE6CE6A83780BF63C09D31B83F46BE10A17DDF581E29607AAF727E065BBD9BBE1B48824010E32F09FFF3D5BC7A091AB99435D83C8CB7CED460661CA08E33DE376C99DDCE2F1CF786453C3528CCB85CF6536A6A42D6C7977816D54896F21EFDBCF62B93B28805B8A6A1C9846CBB5B1D5FA8BFF62AA395D4875EFDF3D9126520E7DA1EE04D0B4272BAA0C1EB73AC6E0B049E39E7BFA09595BF5ED35047E38B454E6D09556F79A1C1757DD7ECFFC7AD8A1853D995B03663B09267BA5A0E0B98713AE0D86FEAA12DAC19BA6962541E76C8E2CF5C3E948F8FA3A67C70AF1E9280E088BEBD2542B4648687F4638E2F67B7FA8AFDB9A0FA2AC835E48DC55BF17F70830A642F6E808E48BE2E81C5C90B663C74CE3E7297E62665005EB911D062A3EF395ADB2AB789BD8DD380B86965F2FEB804AFCE3B9D484F05D91790135DB64722238464945A7115D4F4ABF0B77A8E814AB159254D07DCC630575CF98D24BE1969D9DA99DF3AC840DA6650F6794D9634E89E0D95E12AF2623C7F4D0FEDD1515B8BE8D02DAF8375601E3615D312D1E927E0FF3122662D7C9A5095D2714B0E325AFC39B59DC72FE08CCBD78E645142165E1896B29E3572A3B5047FFF4FCBAD24A82BAFD5FD93A4B06A66150EC6753656F030DA609A3F2545346A080DAF95C1A6DB712F3E9D37D3BE3BA83066DD3C563A1109471ACC51CDD2419CE5D2B25297E046E6A49D6D9B7AF796ED1AB2C21E526D4AC44D75D5673010869FB943D0ECE8B842ED80A85BCCBDC7305D5487F437A4076D99880AA8FBD7033637062DDE606A54B8EDFCA3893C849ED5AE4A20392C036754F092585076FEE0806D329E9760279D1CC4C9A73E1576A25A3D9D3B8592CF42725BFAEF36F0FBC05E79038BF0E69967A2A08DBC36254C78A6E805680D2F737CDE461EDB0A291C88F7713EF98BAE84BE9DD4214DEB231734E54CD1FC6157C41FB273593B1C71489E2C0F86C1A44BEB7B6B3FD95E218603CC41EAE23391B652439521203B4D70050AB1AF0B3D53F6FD22D036A6717C0B7BEA97D8EF03AB08C0D2EE7BEBCC7319A9F1D7CC6A251D334FA247C246F1DBB6A8FA107363C2F53E11B7AF54B0FD6E558D2502283264264A6C27EA22AC414D3FDF53A315B481CC86C7510F50A255928E8DD730A38C4CD3CD4C94092E6FD303C626B3A5F583105E511204D5A36107D6481361A339E182E8430F74BA442DA7C56A56362CDDD9E9E4288750FCC95F0995FFB26E0CBD9459766DBEE23C171D0B4EBCEBFBB956934B249E6DDCB463413B6562402437D8809830A040C147D8550C2214974E70BB8A3427F16D8BEFEFD08C9FCA8161CF6B2CC9E8A0B95FE4484F47490076F25A07992565BF0C28C47E5C8FDC4CE0E2C0F548196FA91313BB4B77C95766C90B0970751ADAF11C39D753E03711495CB41742BAAF3E244EAC38B667D2F3A8F8C96D54E17488F4EDDFF53D6419497A0E8D42DBC86715E8A86FE0F24C4736BCC8B90B28B5485CB76E326454D73DA29189F70723BF347E1F1538E1467D30F0CA77F41CF405D25ED4EF56A17AED6A0CBB200B8BB688ECF0F4C28259F53D3C99736648BD70D566DACE2B1E22BB36A41AC69C46C54F369D37B017D82B20A4D33F348913AFBFC09815B150E4CDE6E86F80AD69E65CA02E2A14B964F555F2850C545EC88A11D1F7D45413F421600BD61129D5B561DFD78B4863DD1E8D6C481299EE2141977BF8A5E78109E6112A544E0C244DFA759F85FAB9D484610DDEB7F733417EB0B9C9BDC14635BC2633E566A83E387FBEDBC86C7F46A4E5F9D5CBCF546CB85D0996E5815BE34C21E41604B2670DE39124352B58F0ACFC2BEB2B16B514D1E59A91E42AB0F27FC62FF5EEB2470EF36A05978A4166843F7B8593520976981C463384C68C50363B05AF77392571C7703735CE3AE0F18E05435EAB6896D47AC4235705B778713E31F2C5DAA0A3C6074EF668BB763AB30E93D8553D44617DBFC74AAB870CEE11CA2448425374D082DD32B7B16899B2DCD82118E017E73CE8D15C33992267578556A59ABADBD0D63AE2788084AD486A6142BDB90A34C2E2E5746AC3219695E624EC6E91B4A074424EF14518A357084B307A610EF310ED6C45ADBB768FC0E9416EF28D984E5525FD00010CF4DBD91C2DB0C5A8321516B6C49D7A2C8098C3A6ACF9A0B9D25DE539787FC716A58E605C9C68F7612B6A93D8504C45ADA716B359FCBDEFB8F3CCA88CDA25584EAB08839C7F41519472FA0E98F75284F301092E36E856851E0513BF01438F969ABBF0355132457BA698E991FD64CC296D56EF16F17761B5493E5D1F79566D5407EB84F9F539D138E292D67FFC6A9D2DD97EAD87B51FA17ADE5BC622AD4AB355D844809B944C3CE299E04BC5CB9178DE016C2F8D2176ECE047DFFF64212220F4C75C705C7BD1754F7263B1088A5DDA386D7719AF65309BCC85D4C9E0470518CE1315201E67AD069D2F8BE433F1F42DBC1E5DC26835DDE2656FDC24033277892425EA1FEDFE1E1A242DFEC4C2419C24E67C1C6B2CB92DC89C4974A4B255DEFA071887707167C87D9B898A55A979BCB0BE0194429DA46FDA439DFFCE4455F045AB5853B11AE25ED63883B03C85EB95D8D381508D81C01909E09E16790542B9DE47448D12E26505F98EED13D9A413510BC5B3D3DA76C684B3BFB1A01C6622FEF325AEA039C797963B109ED27D9FCA52CEE5F81AE0B6353660A98E45137A020738B093FCE89BE3E6F03DBE2D8E47A07B5289F08BEDDEF4CD04B715F4BD6DEAFC39916D5084519EE3E88C593DEC6B933ABF6BBC29A2E4194DA9EEBB6FE4DA1F06BCE4C6E360251FB98830C14E527679EC03EA2CCEBC001A3992FCAD3EA04E4F887032BB6A6EA61B4A6C8189A3113B9782C347EF06C69C5C4A2DD0DA13E0E5748908B0FC1DBD3636C2C056864ABAF2073BCFD3AB4D5D6ECA3F5823E3363E4F3830AAA6DB0CB7E2DDABF9FA59F758EE982DF670378C65794A51B30F451C0DBC70D5D0BF3EE574DD2416E7620D7E17546B03B3E3983C8647FD4A2236629BDDF01D8F2BAB2E7C3D9C275BB2A746807B9A2F11CEFEFEF44B0F0EC1F8A4F27F44FFD4FB265803563B50A2570F7260F085839705888E03508D614F2DA9F007ADDAE1F3552B0B867FBE4CE17596418DEC4197F0C6A11789ACADC7172AE33271F8ED255E16660EE4D82F18C62656C9919AC9002BBD600DFFD93D95C3448DE2C9EAA5FD707296C4EC7C91297C8EB75BA5FF96E0C8C4F28DFDC01272A2979993B1B557E2846D8091E49ADF9B9C738F460FFEE5F70AAC1FA5432BE718F19B2B0A7F60A88415616E54ACFC2EB9B43E2CC17244E64922E3E694C14138A13FDCCD54C7B8FB52C0B1B1EC805BBF8CD03428085D3D2F43B9CB7A59F8C485CF18B190E675D8F9C678638C639B9BBAA72447DCCA7623682135D7758D585838B0FDFBC6155BE7DFA25934F2EC88FF3C719A28F0676AD005C73465600B24DA7E01FC23BCE89D142F5C50DEE69B3F865819859874C9221DEF29FBF84887D713E77BCD8B0A5529370D54F4E36CA511E699C49685CBCA395045BC45FFB3E493190F163D0E0CCACA8AB221C7910DA5CAE7A13BC7250A87091D6DF72FD989914ECE1D755844B5CE1B616A94CF1451EA135228D2C195E1F915717CF6A12927358815DDA15A91CC14DC0559E317EAAF273D60E99111A056A86479FC2C4FC177C67EEFBE537C47C0A292155F0B2CB7F1FB6292A9358F730D97697B28B9786425439197F24A30B79E403765B1BB0645A530958DD4E7AA6A8B0E32180C5B809B3E6A66685F00B3E0015D7FA87E810E7CF265FADE549B98F02DB93D28440C221FD78A6B4A4FAECACE87744F68909E29997DD4C7F9B9D0EA473196C232C0D087B689081CF3CDFCCB5766546478243702CC3020E3915F6DE0B36EB40CFFD02873ED59064A71386C12B5908EC392F88F4F9D557AA45A410F1F0BB450718395B66AD745EE4E8C67D859196A07A994B84C1B39A1663E06C973A9A09DAC53F879DC93A56C1B19522B7B05F8F57B870952C9AADC6AB0FEA608810B56D451EA44DF8FED874F85E961AF266B2D3F89EDCBFD97D77AE0A0AB7D62C373EE1B9C5F8381E2CD1E321AD66D3F73E880D9E6E99A0A1EC98DE6D4718FBF132EC32D187E2BA24356199262F625EBE4D19C08481DE1185629D9ADB3A54DF61590C2457A33F3262934793E3CB5229FBEF040ACDF42804535D703BFCF17F70EF7FA4CAC023E83734624D734CD68F44FDF8273231A1574A566660E47AE1AF91995542CE42DEAB65D5823BB61283A989C5C7585954A7D7F3AAA9B31004D2CED7294692DDE45EDA150CDD8F9A06F65695CBCE02A0B9B055841CAD5C8C5FF6A2E2578897BFC11C6408FB9497F5E0B600D5D086B1B53F4A694B727650CC8969D6DDEAA16F67A01872893E08DD68E929166ED8508E38CF5EC2902FC677FA2B8AA8BB41B070D108AEA340A8856AAEEEB3DEC168F8B3B680EEA02BC353FDDA083FC854E535A1516FDD32BEEDBEEB9D3F50A7E76D6588D0849EDC4AE268150EBF60AFED1A4B29BD2E6507408C40F4E38C13A14A58F39882F72A93554161124BB2B4394CFC57B217C790E3ED1A4D9729506F5965190237833EBF50650882F89035A7B9244F1763FE2E20BA23B0FCCCDC75E7D19750650153DBF384076053A5FF764E95B8076701AD9817B103DEBB6AB250A91A8AFF10F9C694BC0E1FB47B0540F40A4B7E54D4DF7BFF0B6773D593CB1E542DC0BA36CF4D88DE2152E34F3710077B8F5C2116038345C7AEDC3142ADAAA96DD6AFE45370DC2440B9A72FB670C4C0927FB2FFC4907D7F9181561F0109429128A6F28BAF03540F90BE963D2EDB55E11606F40EB64479EE6BAE7C159CBDBC805054E6312CEDA9F0AFE72642B915BF17270BEC4FE73B289BA5680E0B468536C835CE2E22A842DF7B7A42F819D32220105393C1ADEB8838A9370302C9010E586E9EDA7403E03525F4212966D6D7AD719DA3906D353ECF34B3A574BC194DF2B28F0FE88D87AA0C37EF8255F96F3D2A16D84ACB6E20D7EDE3296201170C7CC6D524E55201B42E17854783D7D9BB1B62B2F75F7D799E9353FEB130D29932731A7F6B17D8F1FF628230AC80524DBA407AFD30E581461D0359DE7D1FA98FD8ACE29D2E07D5D10C05453D6D957A92B2B253FB78070265B688FD3BB493A325833027BD93C858A6893245E22F5851D1A22F12D61B75EBF89FD20189EE83BFC3E28B40450C549F4B805123A92D174557D584A5787BB6100F4148C538B4E8B879662A3DC00BB1E1DF2F6C3F062542EEFDCC22065F9346AE55A5C37BA0C27A84933CFCDDCC723A92C5D81B3B8D5E7CE205003048A2CEA9A7892567BEA46F085267807AB95F76AFE22EFA8A4E60BCEADB30CF626F6EF303F4956C4866723D8C3E56B872575D8834664FB0D93721FC4BD8BBF39980D706B5CE43B56F6758E3104FA25982B72F81DB73914A9F882158C930F877B43EF65060E89DAC1E869FA8FD09E0C8FF2EC8C5999BFFEF07589E94E1EED536BCE40BB0B26115F72A2FEC1C6BD4DC8CEDB4CC8A35D326870D7E3FD50B155B3B6A53D2B77C56A3C52CFB4F5B86B55FCDEE9A4AC86DF9972081C2E7F712ACD5407E1C67714C46A07CED2CD30DF5E2C4E3CA08E522B7D6B4CB9DE1A6C52A26E654C0BAECDC832EE0E7D86C886B0B8EAA6A2CC270CEE0B2076358D5221E8C974A95F379747D4BF50401EA91D6F3FF1D492B6CE029A24000D296EE23F957D8485F777CE60A152B90AAEBF4E5459189EC24424262BE8704549AD1AAF9EF0F1AE92D6375FDFF7621466B7CCBBA6D49A757E627206440617D3ACB2A58FC53CD91ABDF5CAE3EE63D7E8C593454FCCB6D89DC7959FB073DB47869B2CF0E29129BF5AE6A6E8373C0321B0FC94281DA6B0B3C7558541350788CA533C4B07F8BC62E6ECE6FC321851FD16B069930B1D8C55518AAB64EE9B8799676C005277E6C2150FDFC671497139E56E2E4248E8C1A0B6D6D72FD75A4FA1349AC700A5E789108E7BD14C1D0145031484EB55E6E67A78AF38FE933BF48C1A8D833E6BB4878556180ADCAC6BE88D434A382864EEEB5531B227A387941A48DE77D9ABEEDCFF0389D71B76D41D1DA4F460189CA645A1FA15A0B889BA4594E81C69AC47C34CBB0FEAE9B975E9EA146890F47338E168C698C9AB37B7E6365C8F71C6E4A7EE7982B0687E2DB73535A3F1C14E514139CFE2B35E4F836324151B1195D3CE3581C7AB90798F4BD85EC998524851B1CCE476D5D1F0B0214F495C7496572C6BFD62C25AA04883403E6599FEA4FADA0D70A918F75969F84C543574CC9B49AD5BFFB918F86716379D2FCF442E1364B4019E05BC9AC3F741E5C4A2352906DE1F257C77A72CD8CDDA9CCDA8B790504D30B851D95B138C2160F0C2F6AB3B7586A68CB31F491D35A9F02D240DE6EE49FD171A315ADCCF011E5585B077F22F3687F7D3CFAC29426FA4C8E9AA9B49ABFFF0881173B01E5A153505878D1E0880EA9CC753813AACD1F6705A3677077B3B922F3107FB71EEB69E32513030CFD7696645318CA61B382272D9A7566734281358440F7E78EAE735DA2FB31887811C8639E8BEE7571EE68438DEC7C5B8CCD936C153C24717496A06A3845914DCD8275F79B7D52E2F737067A47D2159F6E21846CCF191922E2178980531C9AC7EE07D6BAF79FEE2A5816DE885B6EC1EB269322554461A953231BF13B946D98486E50C06985B2B1B1F5B8ECAED2CF33D7FE475ED34894FA437983E36ED6AAEF88EA6CB00046B83E5CA1BAA4DD57ADE950401DF33EFE9503D2D24BE891A72E2021211893602458CC9D86FC45F544C2E1F4C690A10F4D8A747BD67F892A7C21BCA1F20E568ECD7CDCFA3FA75D61898069E5A6A5D4B79419E1201CF21D0A09EB9DCDB0CD00AB4A4182E6D723B01C65C75BD9A381A562E797F479306D19259017A5C7D36639668C6CD6A2385CD45287C16C34C947FD41ECC7FD4316F28EE227C3F3D4622BD5A3E9F9C29DA7C425FE395509B8A350B2604ECD9826CD9C29159A28A94ACEA4F2B765ACFF7F0E33E63D29E5DA0DDE7E10AA2C397A5D919146636DD280CCC2C72FC6F69DDA6C6E46BC2D88D398EBFFFFA776FD253F388874D8D03451C2747B5A6E2A10D0D17D163C843F098C4D7E01C9F11253A193C9FCBE6719C71C44E6488C815F3E19955E2EA11860A409246921034223DAE8D4CAB4E18D2968A3E83FC0004372E018435A1BB36EEB0606D11923983151177CA680CEBFE396B5E8E35BF76779B7AD0F54B496D5A124EC8EA3A3C41BC7FE23794CA1F55BF961EA2F2C26099DF25BF7BC9004280DE10253036324E95A2EEF1E196C4067D4BB23A0D020C70A799C88B2B0C702542CCD2FF641D041A673E6B4EE264AE6CFFF5458ECA4A53EC5D5DCCFD57E03709EEB86D83CF8538ABEA9884AC0D2838FCD727883A10A916409DF11A9C05B0B6B0F9EC3BCAC197AB6E25EB336AF8AA92D0F0C9D33880169B5970B477E5A454AD3EE0FA1A45FFE225C5A735DE5E7604E9706868E3BF36605014B87FEF5FEDC81383F90B967BC5606EE79A97888F980BBCBCEC2EE308C15CB7F5FF8770787CCBE3DC9D8A52210502C1E1446ADBA2EF87B8B70C9E1114C736C69E1122529BA9FDA8193DA674EAED49AC5ECB0B84EAD436DA8F602B9ACD53ABF45EB76B26860F67DAD81F4801E19FC8E1BED505D1EBE90223E9972F5A141BD68790CF514F7F4DC01D3064CABAA99BECA074FE3E1F77308B1B1A3C41358E8BECACB8272457ED5A0642B1D07496159EDB2A536A3584484AA7B354DF23F37B78491641604CB44267286E29FE9E0C50EDA8891EC604674E86525E1604C7F510833134E72B656CFC876BC7AB8971416AE3DFD7FC13004ADA6D3B1EF7A927EE51CB42E0C1AE4A10107D4AEC846F79A1A57A6B6D82C8040D254D2BDBF270EBE025E2007E398F4A4EA7AE3ED9DF6AE16BA5D3AF82D12DC9C72636DB27795F5A291365326498020E51F2CF8033EC5B5472D94D41A06F86D81BB15D5FD90C9F6F9954EBC04554C5762D450F5CEF06323CFF822154712ADBBDFB7242BE7FF3832C86273421247902C3A5B3EB3E11CD4CB9F9A87B0AC15A172FCA9F39C4FB5BBB241CADE826D5024BE7677C5BB7D6027BDE5BE2C738DEBB107BC1994E47BB967A4AF78EADB61D6415DE8F7B733A8180B94FEBB09AC1B8574D760AB6E98CAF61A24398CA39AAB10E2B958B662C1E7B22A4C0835B1B7E71553198B249A2B8E872ABC9ECE1FFDA265890BB0C19EF2F46244E61EC8F54398096246F1AF87619A5C223BF22124ABA9B614CA79702479B13B0091BA050BE7AA3829DA3DCA1211043B619F89B7E66E6D306335D2BADBDB91762CD53562C25FFE4B6D389F6B78C61BF9F3739F063D8D05354C38E0224E4888694548C81A985C23329E36803AC9A58E2664A38BF9DAD92C86744D9EC5DCDE63E75B0C99782FAE545468A0971D9C14A1170348FA1DCEC9E6780AB54AFD3D913BCBB9CF412CD0C9185A2BD5F9EE592D9B018EDF8B96E2805BF2A5EAB54B49C5DFFE262DE56ECF626C881778BDA4327C074D2E799EF021DC988F65417D7013D8E8C8F3BABDF9F439E44DB50A3672CF1802EDEC7B1F62EF8EB30233E8396ED168B9193BA2C3F1F71DF2DF559E6B1ED46674178105C88DDF28599FA15D16D99049D808DBA2407787D4A468855BF5B15AB06F66BF82340FFBDB2EDB125AAD6CDF2163ACBB72268209BA2F0C1683260F8691C4B936D3DF2FD9AC3D01F518541914B1F3F2DDF2FD797FE009D2A2F3B333976D6B1439BA5C7212450B8930AEE8ED3375C0DC64DF5628AC0287204E37BB47CDBEC41E05C8FB6EAFD8E539BBCED49AAB1D8BE039B1D3B865497DFD8F1194ED3727D51665E509C8F9D526BC975442D7575EC07A000DE71FB0D43FBCDE18F1DA1B2E7F1ACBADB854474E4EAE2FC68B9B052DCF134C2F4F7CC029885F3E364E965E7AB7C41856365E2E04DB0425ED9AA6DC964E6A0E6F96EC91EE4999D28F6332045F1CD9D137DF93B9A5B6A9992E1D270B4C467C59D6DB2FFC4F3113AD3A9918C5C73042CE0416C532B1CC46292559C84C286C60336812B72E89CF1DB1FBA3ABC96302B04163FC6335BB72D5BAF8490BD9E67657CD9738286FED90B289584C47D2564BC412EBF4E53DFE32DABDC50D7D2F1C0FF8F499175F4371BE6070850987F629A872C5D8E92F99544F5CCCBF89B6E49189106482181772F0C7850AC508661AB60DFAACD25AADAAD76DA192985F174A218534CC6A9F7451099ED46DFC4EB36C09249D44EC8B05A47F93B92CAF2414DCD8A16ECA65FA6457AEFCC827611F8059B1AB7B952BC44E15BDFE89EE18D6CCC9985786919B8608CA07DA3F27975B48668AA5F53B8AEF0BC64AA7C11C80CF098B6FF03D569DF8E609C0F3B1C0AA91FD7BB2221287C9C2D3F139EC33EFE6B86BF3AE0C45F952F6EE15AE4A00E4CB9755109298354E9A41C094BAD46F991E31519E23FEF6690A7F3C8D7C5E13EA8E49BD30CB5CE60FCBB1D4C21E433483E9A5A02A88A7998C4FBA68ECCAE88BA00548C7C4AAECC05E39902ECFCB9EE982EF0A70BC108EDACD7DB25D5A2AF063415A2B41AFDE47EFD62E9872B6AA8AFDF01EFE73DB5F393F707B523BF3A9A1C29C6DABA90F19C2A1DA2E3FA8B6C6AE59C6B5E6ACB2B1B6E39C654325693E0D4A1B151745E72D348EF840B0A83DC58E016286D969BAE2FBC42171168AD208A985403B9B23F8C0392976AC23F2B9FC626AC4EA65574B91495D09D43594736CD50C9001D1C3C2404E9EA572B665106B51DB895E71C093B02E031DD5BF0DC3EA369B27078E01BF459198BE7B0935C407E9669CB9B7593D6657653AB0946068B264BA3599E962F09F606D9BD05BDA83E19F5D417E5743A2547B4E527818F324F580BCB89821B3F6765FB9CC9B7557A53794C1B0F19B99AAA00051E9ADEF63AD6400E2BE3837D2B7DF491BCD750AEE37FCC75380A32A7CDE91E1F3FB28DB2E1C21BAEA068CC1A24D868F081CFB211AB6F0407E67D9629FB9859B4FE3CBB174175C141CA676AA6801A9CE72D90837E3AC3F9423CE600163CA08FA8968145A4D42A57341AE71FD5CD1C8F6E5D9FFD5C3035E934386B58E7437C2EBF027448CC0BEF81E4CFC44D7398C334A34A2789716EABD500D26EE1C26090DFD8D43490B6A58A5E7697BD6204C2CFF1CEFF114B9BAC7C6C83A858307703AEF58285FBD33C13FB364F8FFE65A46345C922357A3C04AC990E043747ADDAFF986BBF047F133FE73A550CF824811DA075CDB741C57D40BAA11942356583ECE1202F95BF6E2BACB06947D39825CB0D5CE4A99E8B44DC9D2A32643CC2896A0B934A4C57EA9B6CEECD47B3B771884775BD163DC44DD01C1B8161C7DFB64AE4684342FAF7A592B58A673DD1B5BA722083E19525D8833C971690D03B29BA26CDBE4CFE458C191BCA20329B6B293F2B29E51D8B393C9680C909026C39853101B9461746339AE57F1D9BCFA457AF7933962C6E6F5323F4A07F2A161691C2F11121C13E157880851ADBF36CCFA42B83FB4E36B65B7A321125DCDDAEC05AB0EFDC780D6C3B9BA1F11B2B8B53F44BB2B37DF72FAEF52C75A5BEE8FE97B9AB92822F24BC20EF0D4DB63647DA4608D2A33D105590D6292F19C7D86506A795F7C4B72246DE42A41E99205B9D62E328B1FEEC2D2EB5D23A6C94421815883D2EF3027CF6DB1C76D4C78E78C7179B5C8642D86E7410B0E6BE5CBBF582148A0DC48C37EA22912F4C0D46951CBF58D6E5C0F11806D200F6D51C37835169B2CC04B53232B01BD6B0CB699DD86CC3273AEC8BAD42B6DE6A460BA26DB8C9FA9D655B0DD7CA07307F67D7CAAC2D87EACCE5D2B2598A18C070E36E59A086E91DC0FCA497C162A21C7EB1406394A430C276F03F370DEC676BBD3479B1706A4F83C219D485AED921DE7728FEC82913107082B71BAE381A99D1177A0EBD304F00AF3070AFA8AF0852FDABD272D35EC5F35D5AD07B4559119FF1F80743CF52C14060BDD67CB8CA34419B1C80ACD6417D0AB01038100C1EFAE84F1EDCB1AD944C8A0F5795AE25E329AE2CC0BA71142682AEA83DA794078086FF709DF478BF07EA70EFB90AE6F747D649EC09A6BF3719825331CB99914EA82A3632487A7BDA11467B38466FA137D271A7B1A8771B4F8F6BB3C9272DC29DBCBE583C9D8936CB264BA3599E962F09F6076ADDDA6C2668E8512101A1117F30FCE6AAE7922F59522DE4D45D8523F863B538FCDBA11C3ED4057BE93EFAEBB81BC373A2C1651CA912817B5A46E6357B713BDC596BD6D44E627AC6263D912946E036283CAABABC03FAB7D81A5A750B82435186B58A6B5359AFCAA7DBD3E5442BC8630B43156ABF5553580D8F2558CF289360AC403BD06394B1C26ACC388F9AE1A6D7C6F99EE80B9D37B3B3E9BFB1DE5747DE83EF5393A108F646620869C9CA2FDB4866C1CD7DE9E9C0848E98B3A46A141503E5374BD61269B8571AB5FC0130B4AFFCB3FF76197B3BFC3540C4EFA7DA6B40222B1066CD757DCE3DDD15670279A4FB0744C970B2F7C5AC701C9442F4B221CF514A29DC50FDD4DE23B77B9EB14D1A9A38F37F787E88DD8207D7A885DC6F946218CB78E888A7D946DC63C5ED051E23CBD4A3AEE8B20CEC5BA91F1FFDFE109E8B40D41F0F4B7F6327526B2F6FB26A8E60AF89A2A967C8C11E81C157CA626EC056A6836DD7DAF18527B40A945C45F70FF2C89534156C5699FC94F61145728B424876022FB15D72102F03404684A2F0077A465C15372D7EA02578393C1845A233B50330868D882493E8EFE4428B354AFB9474C1F6482B4288F9BD218BA29A3BB61E0D65DA3B80A24450117955F8CAED12E51C5364876E4B45ACB5B08480BB47C29896B588CAF3B5766BBB64EFD18577E0E099F55A84BF7260BE350182090455D76DC7537F1B97A6F4078C9B469CD79472F485307E107C1C191E95C6F26897C13353A4C6302C72E98933FBC2F431F5432F277EA60EF46207CCB2B4965E5CAA537BF75BF1E7E2CEF36B04944A1D55BE5D7896C847EBAE11D2B010B2850A62C2BEE7F51C293598FCD12F91D4AA8A4C9E9E167A80166C29DCF8FDD658B2BE052462526E89B31FF89F5AB398BE50019A61D4C10885C9966A616A5ABCB89606EEA6286A0F86C45E195B5DF82D518D15B418C1D4F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/Feijoa-Medium cguidfix
/F1.1/Feijoa-Medium renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.82745099 0.21176501 0.50980401 sc
q
0 0 627 627 rc
20 289.5 m
20 373.5 l
20 379.29599 56.959999 384 102.5 384 c
148.03999 384 185 379.29599 185 373.5 c
185 289.5 l
185 283.70401 148.03999 279 102.5 279 c
56.959999 279 20 283.70401 20 289.5 c
f
1 J
1 j
0.60000002 i
0.005495802 0.16865847 0.21176252 sc
1 0 0 -1 4 543 cm
16 253.5 m
16 169.5 l
16 163.70399 52.959999 159 98.5 159 c
144.03999 159 181 163.70399 181 169.5 c
181 253.5 l
181 259.29599 144.03999 264 98.5 264 c
52.959999 264 16 259.29599 16 253.5 c
16 169.5 m
16 175.29601 52.959999 180 98.5 180 c
144.03999 180 181 175.29601 181 169.5 c
S
/Cs2 SC
0.98943001 0.95793998 0.86405998 sc
0 i
1 0 0 -1 102.5 331.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-24.208 11.75 m
(!"#$"#)[ 8.480000 8.400000 7.248000 8.640000 8.400000 0.000000 ] xS
/Cs1 SC
0.79607898 0.29411799 0.086274497 sc
CM
626 519.70557 m
626 529.65222 623.79022 530.88281 607.64819 540.72656 c
607.47772 540.82843 l
591.25049 550.77509 591.08167 550.77509 574.42816 550.77509 c
552.2536 550.77509 452 550.77509 452 550.77509 c
452 445.77509 l
626 445.77509 l
626 519.70557 l
h
626 519.70557 m
f
0.60000002 i
0.005495802 0.16865847 0.21176252 sc
1 0 0 -1 4 543 cm
622 23.294413 m
622 13.347763 619.79022 12.117163 603.64819 2.2734129 c
603.47772 2.1715631 l
587.25049 -7.7750869 587.08167 -7.7750869 570.42816 -7.7750869 c
548.2536 -7.7750869 448 -7.7750869 448 -7.7750869 c
448 97.224915 l
622 97.224915 l
622 23.294413 l
h
622 22.782013 m
622 13.347763 621.82947 13.347763 587.08167 13.347763 c
587.08167 13.347763 l
587.08167 -7.6721869 587.08167 -7.7750869 571.44775 -7.7750869 c
S
/Cs2 SC
0.98943001 0.95793998 0.86405998 sc
0 i
1 0 0 -1 539 498.27509 cm
-34.391998 6.5 m
(%"&'\(\)\))[ 15.856000 8.400000 9.456000 3.360000 11.776000 9.888000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.86274499 0.196078 0.184314 sc
1 0 0 -1 4 543 cm
116 149 m
116 149 247.26147 24.462021 362 -22 c
442.78757 -54.713982 488.63553 -37.889721 508.69476 -25.068872 c
S
0 i
CM
521.36255 560.97638 m
515.35431 571.31952 l
510.03479 564.81854 l
h
521.36255 560.97638 m
f
0 J
0 j
1 0 0 -1 4 543 cm
517.36255 -17.976385 m
511.35428 -28.319546 l
506.03479 -21.81855 l
h
517.36255 -17.976385 m
S
1 J
1 j
0.60000002 i
0.14902 0.54509801 0.82352901 sc
535 -16 m
535 -16 494.95438 -87.462021 372 -41 c
269.61407 -2.3103859 149.82951 102.99964 112.61835 137.15056 c
S
0 i
CM
108.43513 398.20779 m
119.4875 402.7822 l
113.75443 408.92157 l
h
108.43513 398.20779 m
f
0 J
0 j
1 0 0 -1 4 543 cm
104.43513 144.79221 m
115.4875 140.2178 l
109.75443 134.07843 l
h
104.43513 144.79221 m
S
/Cs2 SC
0.12755001 0.46266001 0.78231001 sc
1 0 0 -1 566 610.47913 cm
-54.568001 6.5 m
(*++,'-"./"01)[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 9.728000 10.224000 8.400000 6.960000 0.000000 ] xS
0.81927001 0.10841 0.14146 sc
1 0 0 -1 218 408.5 cm
-60.599998 6.5 m
(*++,'-"0\)230")[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 7.120000 10.048000 9.648000 10.848000 7.120000 0.000000 ] xS
/Cs1 SC
0.52156901 0.60000998 0.0048197601 sc
CM
626 146.9305 m
626 156.87715 623.79022 158.10776 607.64819 167.95151 c
607.47772 168.05334 l
591.25049 178 591.08167 178 574.42816 178 c
552.2536 178 452 178 452 178 c
452 73 l
626 73 l
626 146.9305 l
h
626 146.9305 m
f
1 w
1 J
1 j
0.60000002 i
0.005495802 0.16865847 0.21176252 sc
1 0 0 -1 4 543 cm
622 396.06949 m
622 386.12286 619.79022 384.89224 603.64819 375.04849 c
603.47772 374.94666 l
587.25049 365 587.08167 365 570.42816 365 c
548.2536 365 448 365 448 365 c
448 470 l
622 470 l
622 396.06949 l
h
622 395.5571 m
622 386.12286 621.82947 386.12286 587.08167 386.12286 c
587.08167 386.12286 l
587.08167 365.10291 587.08167 365 571.44775 365 c
S
/Cs2 SC
0.98943001 0.95793998 0.86405998 sc
0 i
1 0 0 -1 539 125.5 cm
-31.504 6.5 m
(45!'\(\)\))[ 5.648000 13.808000 8.480000 3.360000 11.776000 9.888000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.86274499 0.196078 0.184314 sc
1 0 0 -1 4 543 cm
86 276 m
86 276 247.79605 466.7724 375 524 c
471.37189 567.35663 513.55518 518.61456 528.34241 492.43887 c
S
0 i
CM
537.03198 60.731857 m
528.52826 52.319595 l
536.15643 48.802341 l
h
537.03198 60.731857 m
f
0 J
0 j
1 0 0 -1 4 543 cm
533.03198 482.26813 m
524.52826 490.68039 l
532.15643 494.19766 l
h
533.03198 482.26813 m
S
1 J
1 j
0.60000002 i
0.14902 0.54509801 0.82352901 sc
513 482 m
513 482 484.72165 564.49408 368 505 c
269.74408 454.91809 147.70914 324.04486 111.5557 283.88919 c
S
0 i
CM
108.12045 267.48535 m
112.41566 256.3215 l
118.69717 261.89847 l
h
108.12045 267.48535 m
f
0 J
0 j
1 0 0 -1 4 543 cm
104.12045 275.51465 m
108.41566 286.6785 l
114.69717 281.10153 l
h
104.12045 275.51465 m
S
/Cs2 SC
0.12755001 0.46266001 0.78231001 sc
1 0 0 -1 436 56.5 cm
-54.568001 6.5 m
(*++,'-"./"01)[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 9.728000 10.224000 8.400000 6.960000 0.000000 ] xS
0.81927001 0.10841 0.14146 sc
1 0 0 -1 66 195.5 cm
-60.599998 6.5 m
(*++,'-"0\)230")[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 7.120000 10.048000 9.648000 10.848000 7.120000 0.000000 ] xS
/Cs1 SC
0.42352948 0.44313723 0.76862746 sc
CM
626 333.31805 m
626 343.26468 623.79022 344.4953 607.64819 354.33905 c
607.47772 354.44089 l
591.25049 364.38754 591.08167 364.38754 574.42816 364.38754 c
552.2536 364.38754 452 364.38754 452 364.38754 c
452 259.38754 l
626 259.38754 l
626 333.31805 l
h
626 333.31805 m
f
1 w
1 J
1 j
0.60000002 i
0.005495802 0.16865847 0.21176252 sc
1 0 0 -1 4 543 cm
622 209.68196 m
622 199.73531 619.79022 198.5047 603.64819 188.66095 c
603.47772 188.55911 l
587.25049 178.61246 587.08167 178.61246 570.42816 178.61246 c
548.2536 178.61246 448 178.61246 448 178.61246 c
448 283.61246 l
622 283.61246 l
622 209.68196 l
h
622 209.16956 m
622 199.73531 621.82947 199.73531 587.08167 199.73531 c
587.08167 199.73531 l
587.08167 178.71536 587.08167 178.61246 571.44775 178.61246 c
S
/Cs2 SC
0.98943001 0.95793998 0.86405998 sc
0 i
1 0 0 -1 539 311.88754 cm
-50.16 6.5 m
(\(36#246'\(\)\))[ 12.256000 10.848000 9.920000 7.008000 9.648000 5.648000 9.920000 3.360000 11.776000 9.888000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.86274499 0.196078 0.184314 sc
1 0 0 -1 4 543 cm
188 226 m
188 226 251.60713 237.58348 323 239 c
369.58664 239.92433 405.19351 236.23589 424.31314 233.5611 c
S
0 i
CM
439.36142 311.24268 m
427.63101 313.58313 l
428.98453 305.29291 l
h
439.36142 311.24268 m
f
0 J
0 j
1 0 0 -1 4 543 cm
435.36142 231.75731 m
423.63101 229.41687 l
424.98453 237.70711 l
h
435.36142 231.75731 m
S
1 J
1 j
0.60000002 i
0.14902 0.54509801 0.82352901 sc
440 219 m
440 219 387.39285 207.55466 316 205.85483 c
267.26602 204.6945 225.42166 208.44769 203.76938 210.94699 c
S
0 i
CM
196.66068 330.60678 m
208.30916 327.88785 l
207.22472 336.21756 l
h
196.66068 330.60678 m
f
0 J
0 j
1 0 0 -1 4 543 cm
192.66068 212.39323 m
204.30916 215.11215 l
203.22472 206.78246 l
h
192.66068 212.39323 m
S
/Cs2 SC
0.12755001 0.46266001 0.78231001 sc
1 0 0 -1 384 355.5 cm
-54.568001 6.5 m
(*++,'-"./"01)[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 9.728000 10.224000 8.400000 6.960000 0.000000 ] xS
0.81927001 0.10841 0.14146 sc
1 0 0 -1 263 289.5 cm
-60.599998 6.5 m
(*++,'-"0\)230")[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 7.120000 10.048000 9.648000 10.848000 7.120000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
