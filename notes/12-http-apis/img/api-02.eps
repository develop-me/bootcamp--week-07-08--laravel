%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 632.000000 486.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 632 486
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 632 486
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Feijoa-Medium
%!FontType1-1.0: Feijoa-Medium 001.001%%CreationDate: 12/17/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Feijoa-Medium) readonly def/FamilyName (Feijoa Medium) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -80 def/UnderlineThickness 40 defend readonly def/FontName /Feijoa-Medium def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /S putdup 34 /e putdup 35 /r putdup 36 /v putdup 37 /W putdup 38 /b putdup 39 /space putdup 40 /A putdup 41 /p putdup 42 /H putdup 43 /T putdup 44 /P putdup 45 /R putdup 46 /q putdup 47 /u putdup 48 /s putdup 49 /t putdup 50 /o putdup 51 /n putdup 52 /i putdup 53 /O putreadonly def/FontBBox {-128 -334 2318 1001} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF6DDB462BE17009F2F261B5320C83C58DE85AC0ACE29E3D90B1295618628CE6CF86E506265A524075CBC64D73877D7EB7C120B802E775B8873BBF0C51DC69F292EC74C8222E98EEB1B61B222E253CE88D13383D1E6D8BA85D3FC59C2B4B2CBD5D4ADD4C19305984F559F01473372C0C5D4DC96547235BD2DC4C7727A8CF78849D3368DF87533F6580207514F6673BFA4C8F84454B17BA1DA92D790298BF6AF530427BEBDEA4773D2F6051F5130ED1C8B2246BD6C0166CA3421C26BA386453EF5D965F3C71C88BA5B60A45C669430BD88C473E1B21A90F2EA649309393E2F16AA3F986EE1304F199BE2EE6512C331BABE351B0884A556EECACF770091CB1DC4E782899D63E02103AA16847DB49566AE28F934C5347D96FB081D5798CCEF5D0556532F59ABBF95D937799A0AB1B6AE47130CDE98F176A58A6E5FD04D09B3FE4472DC4545F51564217391ED6A7BA13A026CB37B0FCC347197C11AFF96AA78836998E1FA585829F8F2DF03FD09B58A5D87E970D2409C75597A7AEAE21F24A89CD08F4DBC4EB59025F0C79A12D01123A229829A11A41B6E15E21558D3F043DCFE79365745566F4A202F3DE7F2703AF6A019BEC10D967B3A35D024BEA962AE34289ED63868C9611DBAD3F96067CF8986E5A0073DA1DC9BA3EC3D6BB0929C0AC7A2E104DE8621B79EBDFC3E02DCF52CFA6A47C04F306F58120EA70DAF8EE1A9B4984535EEB4ABE6C452908EDA9492FD3CE87E7D320D065FFB4E6AD01D102C104DDAF73EB8EFE373DD1ABBA9637C1F07EB71A49239E748B85A1EB807711A8C0CEE8F6DA1A957E706E56BFF82C7B71683F464783AA3503DD646FFF8CE721BCF17A58ECE301743BF0ACFA363A13730F4F025BC938832482AC1F5541FF2408ED3076DBAC1A2B9F192E786BD108922ACC3D5A9FF47537E303D1BE43C196837DB83FB71A3502E64077B859220DFA7F75D08D0A2817BF8AD39F3597584D933F10E4AE457F65AFF1516DBB8D28F3AA6BCFE7229D935B1C14F465182F40F510E37ADF09E4746ACCC69212B474EBB26D3106F85862F7E9AC25EC762271FE6E7963BEF872C86B5C041E3C5DE7E3F4D0ED5012DBFF0C06745A36F338BA1B2D06F94C50CB662BEFAEB6CB309ECD709386464507AA21A649B383CCEEDC1746D5395D1F864836E906AC688B105D036ED5695003C80979B75E571B02088EEA5C4249B79A15CC9053AFEBD7AF7180344C3C5C34C26329D2EF950C802021D8CF806A7858832EDCDD6E0F0C96865DB06B08929A76C24E2A764F6D0545555C964294D8D8CB7700F48C445F0E47A3F8767191F9C831CB5AACB3425B95D7A30FD186C5FE883AC6EDCF34B4BC99E2068E9765A11BF6571CB41A13751D070EEECD8860D8E574921F4A4E2FBF22617AEFEB9BF2560AAD6A514F38975761E37E4325555A967DA6A55CF50E21A48012BA48F2D09AADE219D797A04F76D9F35411D8A418D2EEF87A09FA4F0FE221E53692AD78A0C266ABA4F0434E62E85514AE883124CF5C7D4B92969B61D4FD177CC579E7A74A5115F062E934253B7F644A9DB5900CEBB12FDD7D43E42A5EF32122BB3E55EA28719A02986F99352F74769282D6E22713A6BA6EAF552C6A4FE51F72869E0623F147101D0DCCC1BD31C98622B74C08B4F9C84D827332113F63F412D40DFBD12C3B04A0F2F75DC6D683616629A3874C9F9BC8B4B1DEBEC59B4872422BBF902ACB9CA3F0182CD3E8A0F7C1B5D8E79F91967AF010C8E3A8931E1E4C4655CB0E78BE6243073E2AF3C3E45421BEAEDC59346C4B4883F1627E3AB91BCC071F712756472D87539338A1F065B45ADD328198AAB1CBF6D6DED7BB6E2ACBDBB432B67FCCE8F89D6308BA2B528F25DF064116C44390309B45E8B3E7EE8B40254CBF411B939931BCC1F96F1F348F952FE0A91C9434EA6DE2E55C4A26F081CB6A1F510B627EC912BAB1116E6BC5A5CFDD615ABDA5E3E617540B2241F435B9E207C86B71C70ECFB3CBE61A0607AFB88F58CC4A23E0C306776ED13E24A55CC3E254820833A28CCD16ED767B4C6CD3B0D0ACFF9303B8FE9D2424E0860403D1981DC44D8481E38C0CB9220FB507E805B19DB72BEB1818BF3949536806AF8916FA731E0684E0FF914595E406538608472542B278C3E3E9CF8D8F7FF133329A7AE09D728752D8497A05F2E4A509DBD5B97188CFA940F61111F7FFF5B22B996BB87ABECEF11A4A831F2DCE6C2B39B9BF9970799F0C499D3A5D842133CC8A580B40E0062C825EBA6714833702BAAC416F8BF1E166C43A66B05295793B2C5CFF1C9417F2639238E02DC558182A0B293CE622371684893FDF241932B93DA4B590E997BC8DBD6491B62F3CE3AF2DB2DB24160FE5F1A32803D7740B953EBDCA0EEC97F88C8E15F1FEB196D7FE680A21936146FB962BABB0D1F539ADBA33983279C5549FD41EC85A6BBEBCDEA0C041FFA6147D719C88023003DE7835140251BFAFAFF165BCFE6CE6A83780BF63C09D31B83F46BE10A17DDF581E29607AAF727E065BBD9BBE1B48824010E32F09FFF3D5BC7A091AB99435D83C8CB7CED460661CA08E33DE376C99DDCE2F1CF786453C3528CCB85CF6536A6A42D6C7977816D54896F21EFDBCF62B93B28805B8A6A1C9846CBB5B1D5FA8BFF62AA395D4875EFDF3D9126520E7DA1EE04D0B4272BAA0C1EB73AC6E0B049E39E7BFA09595BF5ED35047E38B454E6D09556F79A1C1757DD7ECFFC7AD8A1853D995B03663B09267BA5A0E0B98713AE0D86FEAA12DAC19BA6962541E76C8E2CF5C3E948F8FA3A67C70AF1E9280E088BEBD2542B4648687F4638E2F67B7FA8AFDB9A0FA2AC835E48DC55BF17F70830A642F6E808E48BE2E81C5C90B663C74CE3E7297E62665005EB911D062A3EF395ADB2AB789BD8DD380B86965F2FEB804AFCE3B9D484F05D91790135DB64722238464945A7115D4F4ABF0B77A8E814AB159254D07DCC630575CF98D24BE1969D9DA99DF3AC840DA6650F6794D9634E89E0D95E12AF2623C7F4D0FEDD1515B8BE8D02DAF8375601E3615D312D1E927E0FF3122662D7C9A5095D2714B0E325AFC39B59DC72FE08CCBD78E645142165E1896B29E3572A3B5047FFF4FCBAD24A82BAFD5FD93A4B06A66150EC6753656F030DA609A3F2545346A080DAF95C1A6DB712F3E9D37D3BE3BA83066DD3C563A1109471ACC51CDD2419CE5D2B25297E046E6A49D6D9B7AF796ED1AB2C21E526D4AC44D75D5673010869FB943D0ECE8B842ED80A85BCCBDC7305D5487F437A4076D99880AA8FBD7033637062DDE606A54B8EDFCA3893C849ED5AE4A20392C036754F092585076FEE0806D329E9760279D1CC4C9A73E1576A25A3D9D3B8592CF42725BFAEF36F0FBC05E79038BF0E69967A2A08DBC36254C78A6E805680D2F737CDE461EDB0A291C88F7713EF98BAE84BE9DD4214DEB231734E54CD1FC6157C41FB273593B1C71489E2C0F86C1A44BEB7B6B3FD95E218603CC41EAE23391B652439521203B4D70050AB1AF0B3D53F6FD22D036A6717C0B7BEA97D8EF03AB08C0D2EE7BEBCC7319A9F1D7CC6A251D334FA247C246F1DBB6A8FA107363C2F53E11B7AF54B0FD6E558D2502283264264A6C27EA22AC414D3FDF53A315B481CC86C7510F50A255928E8DD730A38C4CD3CD4C94092E6FD303C626B3A5F583105E511204D5A36107D6481361A339E182E8430F74BA442DA7C56A56362CDDD9E9E4288750FCC95F0995FFB26E0CBD9459766DBEE23C171D0B4EBCEBFBB956934B249E6DDCB463413B6562402437D8809830A040C147D8550C2214974E70BB8A3427F16D8BEFEFD08C9FCA8161CF6B2CC9E8A0B95FE4484F47490076F25A07992565BF0C28C47E5C8FDC4CE0E2C0F548196FA91313BB4B77C95766C90B0970751ADAF11C39D753E03711495CB41742BAAF3E244EAC38B667D2F3A8F8C96D54E17488F4EDDFF53D6419497A0E8D42DBC86715E8A86FE0F24C4736BCC8B90B28B5485CB76E326454D73DA29189F70723BF347E1F1538E1467D30F0CA77F41CF405D25ED4EF56A17AED6A0CBB200B8BB688ECF0F4C28259F53D3C99736648BD70D566DACE2B1E22BB36A41AC69C46C54F369D37B017D82B20A4D33F348913AFBFC09815B150E4CDE6E86F80AD69E65CA02E2A14B964F555F2850C545EC88A11D1F7D45413F421600BD61129D5B561DFD78B4863DD1E8D6C481299EE2141977BF8A5E78109E6112A544E0C244DFA759F85FAB9D484610DDEB7F733417EB0B9C9BDC14635BC2633E566A83E387FBEDBC86C7F46A4E5F9D5CBCF546CB85D0996E5815BE34C21E41604B2670DE39124352B58F0ACFC2BEB2B16B514D1E59A91E42AB0F27FC62FF5EEB2470EF36A05978A4166843F7B8593520976981C463384C68C50363B05AF77392571C7703735CE3AE0F18E05435EAB6896D47AC4235705B778713E31F2C5DAA0A3C6074EF668BB763AB30E93D8553D44617DBFC74AAB870CEE11CA2448425374D082DD32B7B16899B2DCD82118E017E73CE8D15C33992267578556A59ABADBD0D63AE2788084AD486A6142BDB90A34C2E2E5746AC3219695E624EC6E91B4A074424EF14518A357084B307A610EF310ED6C45ADBB768FC0E9416EF28D984E5525FD00010CF4DBD91C2DB0C5A8321516B6C49D7A2C8098C3A6ACF9A0B9D25DE539787FC716A58E605C9C68F7612B6A93D8504C45ADA716B359FCBDEFB8F3CCA88CDA25584EAB08839C7F41519472FA0E98F75284F301092E36E856851E0513BF01438F969ABBF0355132457BA698E991FD64CC296D56EF16F17761B5493E5D1F79566D5407EB84F9F539D138E292D67FFC6A9D2DD97EAD87B51FA17ADE5BC622AD4AB355D844809B944C3CE299E04BC5CB9178DE016C2F8D2176ECE047DFFF64212220F4C75C705C7BD1754F7263B1088A5DDA386D7719AF65309BCC85D4C9E0470518CE1315201E67AD069D2F8BE433F1F42DBC1E5DC26835DDE2656FDC24033277892425EA1FEDFE1E1A242DFEC4C2419C24E67C1C6B2CB92DC89C4974A4B255DEFA071887707167C87D9B898A55A979BCB0BE0194429DA46FDA439DFFCE4455F045AB5853B11AE25ED63883B03C85EB95D8D381508D81C01909E09E16790542B9DE47448D12E26505F98EED13D9A413510BC5B3D3DA76C684B3BFB1A01C6622FEF325AEA039C797963B109ED27D9FCA52CEE5F81AE0B6353660A98E45137A020738B093FCE89BE3E6F03DBE2D8E47A07B5289F08BEDDEF4CD04B715F4BD6DEAFC39916D5084519EE3E88C593DEC6B933ABF6BBC29A2E4194DA9EEBB6FE4DA1F06BCE4C6E360251FB98830C14E527679EC03EA2CCEBC001A3992FCAD3EA04E4F887032BB6A6EA61B4A6C8189A3113B9782C347EF06C69C5C4A2DD0DA13E0E5748908B0FC1DBD3636C2C056864ABAF2073BCFD3AB4D5D6ECA3F5823E3363E4F3830AAA6DB0CB7E2DDABF9FA59F758EE982DF670378C65794A51B30F451C0DBC70D5D0BF3EE574DD2416E7620D7E17546B03B3E3983C8647FD4A2236629BDDF01D8F2BAB2E7C3D9C275BB2A746807B9A2F11CEFEFEF44B0F0EC1F8A4F27F44FFD4FB265803563B50A2570F7260F085839705888E03508D614F2DA9F007ADDAE1F3552B0B867FBE4CE17596418DEC4197F0C6A11789ACADC7172AE33271F8ED255E16660EE4D82F18C62656C9919AC9002BBD600DFFD93D95C3448DE2C9EAA5FD707296C4EC7C91297C8EB75BA5FF96E0C8C4F28DFDC01272A2979993B1B557E2846D8091E49ADF9B9C738F460FFEE5F70AAC1FA5432BE718F19B2B0A7F60A88415616E54ACFC2EB9B43E2CC17244E64922E3E694C14138A13FDCCD54C7B8FB52C0B1B1EC805BBF8CD03428085D3D2F43B9CB7A59F8C485CF18B190E675D8F9C678638C639B9BBAA72447DCCA7623682135D7758D585838B0FDFBC6155BE7DFA25934F2EC88FF3C719A28F0676AD005C73465600B24DA7E01FC23BCE89D142F5C50DEE69B3F865819859874C9221DEF29FBF84887D713E77BCD8B0A5529370D54F4E36CA511E699C49685CBCA395045BC45FFB3E493190F163D0E0CCACA8AB221C7910DA5CAE7A13BC7250A87091D6DF72FD989914ECE1D755844B5CE1B616A94CF1451EA135228D2C195E1F915717CF6A12927358815DDA15A91CC14DC0559E317EAAF273D60E99111A056A86479FC2C4FC177C67EEFBE537C47C0A292155F0B2CB7F1FB6292A9358F730D97697B28B9786425439197F24A30B79E403765B1BB0645A530958DD4E7AA6A8B0E32180C5B809B3E6A66685F00B3E0015D7FA87E810E7CF265FADE549B98F02DB93D28440C221FD78A6B4A4FAECACE87744F68909E29997DD4C7F9B9D0EA473196C232C0D087B689081CF3CDFCCB5766546478243702CC3020E3915F6DE0B36EB40CFFD02873ED59064A71386C12B5908EC392F88F4F9D557AA45A410F1F0BB450718395B66AD745EE4E8C67D859196A07A994B84C1B39A1663E06C973A9A09DAC53F879DC93A56C1B19522B7B05F8F57B870952C9AADC6AB0FEA608810B56D451EA44DF8FED874F85E961AF266B2D3F89EDCBFD97D77AE0A0AB7D62C373EE1B9C5F8381E2CD1E321AD66D3F73E880D9E6E99A0A1EC98DE6D4718FBF132EC32D187E2BA24356199262F625EBE4D19C08481DE1185629D9ADB3A54DF61590C2457A33F3262934793E3CB5229FBEF040ACDF42804535D703BFCF17F70EF7FA4CAC023E83734624D734CD68F44FDF8273231A1574A566660E47AE1AF91995542CE42DEAB65D5823BB61283A989C5C7585954A7D7F3AAA9B31004D2CED7294692DDE45EDA150CDD8F9A06F65695CBCE02A0B9B055841CAD5C8C5FF6A2E2578897BFC11C6408FB9497F5E0B600D5D086B1B53F4A694B727650CC8969D6DDEAA16F67A01872893E08DD68E929166ED8508E38CF5EC2902FC677FA2B8AA8BB41B070D108AEA340A8856AAEEEB3DEC168F8B3B680EEA02BC353FDDA083FC854E535A1516FDD32BEEDBEEB9D3F50A7E76D6588D0849EDC4AE268150EBF60AFED1A4B29BD2E6507408C40F4E38C13A14A58F39882F72A93554161124BB2B4394CFC57B217C790E3ED1A4D9729506F5965190237833EBF50650882F89035A7B9244F1763FE2E20BA23B0FCCCDC75E7D19750650153DBF384076053A5FF764E95B8076701AD9817B103DEBB6AB250A91A8AFF10F9C694BC0E1FB47B0540F40A4B7E54D4DF7BFF0B6773D593CB1E542DC0BA36CF4D88DE2152E34F3710077B8F5C2116038345C7AEDC3142ADAAA96DD6AFE45370DC2440B9A72FB670C4C0927FB2FFC4907D7F9181561F0109429128A6F28BAF03540F90BE963D2EDB55E11606F40EB64479EE6BAE7C159CBDBC805054E6312CEDA9F0AFE72642B915BF17270BEC4FE73B289BA5680E0B468536C835CE2E22A842DF7B7A42F819D32220105393C1ADEB8838A9370302C9010E586E9EDA7403E03525F4212966D6D7AD719DA3906D353ECF34B3A574BC194DF2B28F0FE88D87AA0C37EF8255F96F3D2A16D84ACB6E20D7EDE3296201170C7CC6D524E55201B42E17854783D7D9BB1B62B2F75F7D799E9353FEB130D29932731A7F6B17D8F1FF628230AC80524DBA407AFD30E581461D0359DE7D1FA98FD8ACE29D2E07D5D10C05453D6D957A92B2B253FB78070265B688FD3BB493A325833027BD93C858A6893245E22F5851D1A22F12D61B75EBF89FD20189EE83BFC3E28B40450C549F4B805123A92D174557D584A5787BB6100F4148C538B4E8B879662A3DC00BB1E1DF2F6C3F062542EEFDCC22065F9346AE55A5C37BA0C27A84933CFCDDCC723A92C5D81B3B8D5E7CE205003048A2CEA9A7892567BEA46F085267807AB95F76AFE22EFA8A4E60BCEADB30CF626F6EF303F4956C4866723D8C3E56B872575D8F99C8A98DE2818445DC7B467B9886C2F5975074247ABDECB5F6BA61456913C4321E200B17F3804344B8EF1014696BFF96ACD0CC11E08DE8481FF4995F3504005AC523A5965A1D8E21DB1CBDE46F5403F392E6A33AA2D76EF395053B83D42766D4718CEC82043D1A02E9B52CD6E0523E4C7C4D6D738EFEEA392AB8A872CD226AB9E01B3CA3D6749E90F3CB4EF1F97DD09F8F320B1DF57AF07C9F4B1C631DEACC3BC3149D87BE56450EFE98C0DFAEA3EA87D9DD2CC6026A37958050E43BFDD232BCBDFAFFE4D50701C3EF8DE91C49B07F341A43BA60B8250C40D773AB7CA0847AAA3B382E301EB03778C97F0B7DD905B0C50934A1C4A5098D6704E57DBE91D596CF4D3BE4E55C27CE27801650346E2656E9709ADB48BD4E2EEEE3DD2294550483B99BE3D4B899BC55726ABB601F1E5006DEF6400148A119D286C683DCB02696ACA98B2FF8E1BAC10A13562D3604788ECB7647188BDEA6600FC2BD665F9A500960A8F4974CF351EA7CB3E6912C818048BB65EE5DC418B34AFD0CADFB67F47D1C8E35898AE5B02506A42E55602CF6F1EF98DE3AFBF816D8CE816C936F361444F31D1B916A081F8D511266C0CA1EF1DA5638EDC8FC5D7FDDE347EF96E6E1EACCA9F4A4247B57BA6C184AB7BD5CB5DFAA6E28AD8ADC33D1E87C26088D33E09733BA2D1D43851659052ADA73AF93A6D16D469A20CE3D048174F30DF0B084610AF8D0F85CD38AD3396DC78EA5387130B32C45DDE965C955548634FC6FB4C39295B24936692A99783EE9AFCDDBBB37077D43AAEB43FFB3B11D36040EA35B1F4BCB4D7A584C8265A7FF543DB96B0F9D9776B53B596EF3E82D1D4FA799408B717AEDFDD7BFC578F6B7C2BC40F72825C781DA7D41F5F515CEE08161FE8EA9CDC1CF8B843570D602A7060310673BCA69EFB3CBCAE76BDA649561C9B9F1120EC661151C4E1047B6D7C1400C3EE6E82F3AAB810A07ABF8C14AC3CF4EDA9E55A4B50CE09F8F142C6CCFA28D227DFAAB2B1DA18F05B3D92FA310A6B6B985DE0CA6FC8E3C5FF39B9A0785E5DF4C7A5BAEC0396F02022A78BB478CD1AB1FD01AE5DB465B03B10702BB2090A63E1193F36BC4D9FE705958933796B1FB0AEB9D9B4CC43BD150D9277D88319AFB97D868C76716BB9315C570B7C026C5DE72BAF5720F5ABA4320CF63CDEF6910B3BE85DA9CFF90423B729DDD473D99C92607E64EAF051E94D5ABA85A97D3BFB5B20D523D22412879359CB1076DEF7B9E6A60A7B1CB9892E9AD8424D487A5F966F51A5EFA15B7F8B640ED3121DBDC410867273F49934DB890FA7753DD61C6BEBB25247F5AB740DB8B105C0A0BBE0237FEC13CB89EEBC100A48ABEEE877FF2030808C0B926A3A57EA5427679FDCEA6CCCC850D8F418C8521E298EC60D1971B7175AAC192919D5DB8E415845CA01DD07EBE7CDF78F0BFE8CDD77D21BB7B169041C427BB2EBE00F07A55A27532D8337E28B7921A0A45FBAC29929837AD143F2FEE744A587BD93D9EF7E29967763682F73A7AE4D25D9F33362059FB832602DC5027B4CD25BBC2AFBB5EDD8F41FF7F5A2E87F5669EB73DDA3446A0B2C8B58FEF051EBF92E4CEC4E3DDAB8373A37C64B759E69F38ABC24CCEA18870B109D89E2583115DC888D5D40ADD0CD200ADA93FB6C880A3D69D6B28323E9E332695CB3728F876A3220CF8AE8BA8840A21C16C2B620BA6AB80C3AB3C503600D0AF0F1EB740D75F87F9995097B86B2D0DAEE81C9BBB90E5A2B3C50270CFC224B4EB10CC8F2E6FAD934B6117F47C8491E8FAC1216ED9275B735E92B46DF72A4239D252DA4A133D4EF8B7AFE3D6D6556C26E5FE34CB9340EDE6E7D689EC8E6E7D3A650A11282A057A4C5C31575054A0A7055BFB863DDFD3481542A99913F77B755D08A56A736A1E7876283FA387ED7B637B8EB42B9D663DFFD27317B53F121EBD2B2A16926F6E7373828E185CD88F5850D9B56AC3A5372E196903E2A56CF30273743CE66E4EAB15145CAE3BB5F71AADCFB051A8FFFD72EC89018A3B0181A6D9442DAC9757C87D9D77F1394907C5F2922F73E85893A6674B7E32B57D972C00956C0FE2AAB4BA42A8A53E50D889DCAA8D66DAF383F2658C33BACD0F4D746442DAA3C17681551888D0F3BCC2844C4560081E5218384EF38D832A54D398FEAA35CD6F29806ADC335BED119470F80ED51529BFEB214FEBF59D9799AD4992F99426989D9AB52AF3CE33CB3A2881A44FC5AACF46AA03727FD3589FF78E42FF4C14952133D0FC524857A16F0DDAAE76D687845153CFE866F9B65BD672DB330735C818A8834843113DF6F143E312679C748565F733C82A2DC9DE0B77787BCD8B3D8B82DE04A96E372EBE13F938632901AE636E94022F866E48D5D964398D4E7EF283748115811AF7BEE67B71566462B4B915569CB6CFDAC2AE42342A1AB4F65879F760C09388BE9E37C1D581C2BDDBC75F1F714311B5DDB2A8177C29BC8914B7697715D8CFDA7EEF648D83DC16A0EF01C6BDAF1DAF417208A8806702F7572DDDC6E5AAFD6FB2DF0374F1BFE118890E94AA602D34E022B2CD6853BE859340D3C957F14FB2ADF9D70EDCF252D34B873D575A74A2B6F4020DE9EFB048E20C46218AAD48B44BFBFE23146F3BC09ED496BD9AF992C3CDD61E105D4C3AC53485F6D523829E93CE7DD3771670921AD37870879C2B1561DCB5AB9CECB1699A168D4DA06F96266275C6245C9A87C4E3FFBA72F39548B974F28C294CC96DB6D793A29DE140F1E7D873DFE16B9211ABF701E408FB7B3446047E14C5E14FA96A2B849D8591AA7D83717E89E3892BB01085E836A097A1914EBB01F429D0AB3F7BEF71AA65B0288EED8B31193635C3B180A3016BE75C68843C5D74ABEDE3DF80C1D49B5BB44AEB1D82C7AF55B865F9CF8034FE03799060A0581280C5CF42809799C3E9808BE27ECAE0BF86BE82FECCBAD36765B90F81AE0DC5A22FE8725EBF09A65185F3214C20FF453386DE1FE471FA6000C453ADB8D6537E5575B2DF146C10F918F29FCCB5F9135948F9E8C8B2CD78F6A6BDEED947A777390CF59BD192A20CF17B2E3A54087BA72B657091E340ACE169C169B1CF061780E534F7BDF4698030B8AFC63DB534BBE4C4268F6C969164DF6E59FB78D2026583A409492EF9FE09F5CA7A92358F0FD3D007866ADAC3E46E98930DFAE024D67A3921D06D995FB76FBDD3F781C25A3E852FF5AEC8A44432BFB817DA2C19707A0A301D3A75B8D7D6C20B6E6A0449195B534D62E90997F33DD83B18B107B424061ED25BBE3F29F0F51F463C070BC73D0AE073C5452834D2A2EAAADAAF8D76DDEA3D56AF2B64A50B12CD0A54D72BF40F5CE6615527785820A49D2219E61F78FBA8149A4F9BC86BDF8593D485A65BD6A37A9344E2D049F09172482C72F6DF459CE1216A8341B622A6EF7300A9CE2512557F4B574265A679334DDE14970B9C296517F7F798EFFB514AADFC67DF9FC33E51377175E384B363D9728BAB0136F251113CF08FC2F4C72CAC9F5141287CA30C3F3C6E07F909DCE97BB48766D2CEAA9C318B581B1957F4D564C7D33DFCF647D2534F7BB8F3B24621E0718A36B04A6114E26AE09D00C4B1981398A1B007BE988B3826D1132C04B5D1C777BD28D4F8A78D3929C673A097234D10F5C435A4D009F8F9E42AB8DFA7B6A227B03660E8851800764D1B6FBD2D8AB0BC62962BAECE27F31DFF16798F8C603E896FBB65BB4858E5B4D69921D4A00AB183BFD42ABFB4F50C9710944BAD7F6747050B1DBEAB36A03EDDA2AFD37AA35499DDA112233447C9F8705AB4550E9100E539B311718ED35EA6A58F4CFBCCEEC418666CF7D8248C3C9A1226C73041D0650C28BA04695C7FAB64C0CE2F52DF8B94E22C19833FDB98A5A320B7D945D7707757485E6AB4A0C654405960C739E429EA123621074378E3DB809BCF02A5419AD884F79F7CAE8072889831E12256E4761A27E35BFC90095AA32A90E192528CADC870FFB32A41516BD67EC3BCC4A8A9F1A181F99B4E1644347B1003B040D2B0B2CAC3A07620273144FF2187080C2A8125B4C28DD6A189304A5B5B5915E91CB5710E93A592D87560A8EC15628838643DA070FCD93B5958B0738FF2E109174C46281AF1BCEBD00A61AA07EB64E92E629944CC539DB161F708BCB8D7E3054072C245D7BDB6DA5834A910F9F2BF5CBFA4AE1E25B101565A762B178AD1EDC212E77C2642D18C52AE6B63C396460745B61F6650B36688DF5E5861E3DA64E5973293A393BBB4A6E133BF5FAE6443CF02FAB9874F98F6B2879216BF697257CEF957E0DA27DF0BB38553270675E881E7AAE96FCAB4E6BADDBB145D73C7541FEA3E489084E28D35A0F1E0EB20860F637AC1976DEED87EFC023AE8C0BAD0FD72F7F1D15646605079930FE1713B424565395EF43B327DA038E8C5F31DFAF6819DC1365B7A2F093508412044A75F8038B5873449E2ADD001A2520E88C7322DA4F463365F907E1B8BD4A6E73D1F8DCC856B3D6C5D33D7EA1CD04E403A5CDEA307672CF8B941BD4127F3F4733F0731799FD9C1D86BA33961CC06D77F5875AA495B71C09F269CC4AE3B5D56921EF820BAA4C0AAACDDC758CB357735CECDB54BD2D3DEE0F30B5F2D7C4AE65303024FFA25652DC7FE3C1390BF13F19C2876AA6B301AD1F7982D679075D14CC6BF7C4A81E6552C37F6D2EE23233283F2A0C8996E4764E4566AE2F44A80116BFEEB0D44B32E0B8FC64797F764AB640C510FBC56D9B4D5B80E38DBE5AA22DA41408A04268D15FE634DA1155E338A24A437E7EF5058188B062439BDCB56BA923CEEE4B004CB4FE1C4F7A53B0E644C288CB69312ABFD2FD18565ED5CA51F307FBABDF42BA4E27E1A8FDC0255B0F262A37D63B8A611D514E7CE31C6B88975682CF9EAA2F96C5CC703BA390A540202E87C04FA92839315ABFF9DBA96DA3EB54009D0D690B36B5F2A13A155463DCD01A3FE988D71C23AE836965174959F4BEACFA80128F18B283941ABC616D252CA4F5C6359658E109D74CBA54C3FE66DE76209923211B18EE7AD7DCD09C496DF62ADEFA6C96A578F72578D188B4B051471F20C284307E548095B40121CC832F28ABB36EB0BB0B1E20236A7F8FEEA903A37CEA095544EC9ACBCFD2223AFB47EC16DA6208E19D8CF0083A3F213CB931F263F8180ADF4D5541661921323D8A4FED0328E06AF30EFEB28597EA81A232F9427B854ED8C3C7F07C2B219B7BBD7D23FA885003FDAB02225D56815BC67A29FB4C51EEE3464B60016C17F4B2CCBDE352A923FE0E70E3E3768AB3E1507054B7293537519A78F39E7FD6D2CB0DB93E4F136D0C66C7FED09C0EB1C47FCBF453F8E2FFF7B4DEBC9917243F55D88189755900EFBF1B22A5C75B755CC763B84E2FE8BDC0A39A724CE33F807ACEBB8F123BF272662E2F11167981F4EE812D024C4BE128E68D90A552247EEA62769B709207FA173485ED8AA70B98713512DD861FAC5AF4A3D2D5ED8EB2C15078F7E59A137215DC6CEAB8A1137AD5B73B763CABD60A0318601EFE126B9954C8720534A9DCA799740BFD24F0B3D7A7232C9A4C22FC64884A63CB66C0035CA8646809B3411FF6DFB24C4B25D482D42D2C6CF8F20C3BB78818C2C4FDF7057250B6A627065A6FAD0C990C5AFC270832455E736E57CC0F5A348FF8F48F45150BE07B43DE30E3D750F4AC4004E47E44F271BD1FF5C2573E797F5735EEE8D3A05579F50F42C081596FF4C97BB5CBBB0C30C163CF9CC62A6A6978582F8DA41EEB0FCD1CA3A00E8177EAA5F6CF84C3A35CBEF2A9F47497024272589C6F61D91A71C1FCEEBC1501DA0CC72037EC8F4DB7892E22B9979BF7BB3E2BDC74416788CD33B8ED3712B5E0456233AC07F6DFE8720DBB4BD3BABC9A33A3893F77F1A36BEADD476A154587570BCC42436E81511345BD1420416D87BF1159EFE4F5FF3E9F889A3340A8E17E8855D0AEC6F7C49CE38B145131EAD488C62EFDFCEE00898A7FC0024C696456D759148AC9AD59E07AE76EA17C23FCEF7F286201BFFF08DCC05166405F1094AFB2137E5B1C771C8EE189E6786412B375E0C58C21CBC70170E2E3AA094991C21DDEE33EAB645A7779139401E2E55C0AE0AA49F41AF9E59E548C88305842BD910ECA188BCAC4DB25D3D1849A2A99FD942F7551A7E78EB5B98393CF67845426A84D2E623F7EF7044A10E6CB67A4703BBD9E08D9932722242127B2ED2844F1FF5B806DD0014D90042E5BE2BB6D2FFAB30ABFA8BF5D8031ECD46E9FD316F66FDA20F12D73AC176A32C348BE888A5089DA9A4995E04C290188487BAE349AF5B3068C9A60B095330264E8955119EA5E4DB419BC57A58AD14191B0E929EF386E32C5EDE83053FAC5FC9A296A943A3502E29D0E7AAB85D7C7CFF8A58085284DFEE0217235E9BD9DC7B88FDB6FBCC2F04D661A1AC71B68F6328BD17B42319D37BCA9BB38559258E763BF89BDC1ED4A9312BDDDC20887971E85C22EE78B406E30501D37FC89696F24AD4E031786DD737B0D019667AB16300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/Feijoa-Medium cguidfix
/F1.1/Feijoa-Medium renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.82745099 0.21176501 0.50980401 sc
q
0 0 632 486 rc
25 202.5 m
25 286.5 l
25 292.29599 61.959999 297 107.5 297 c
153.03999 297 190 292.29599 190 286.5 c
190 202.5 l
190 196.70399 153.03999 192 107.5 192 c
61.959999 192 25 196.70399 25 202.5 c
f
1 J
1 j
0.60000002 i
0.005495802 0.16865847 0.21176252 sc
1 0 0 -1 9 456 cm
16 253.5 m
16 169.5 l
16 163.70399 52.959999 159 98.5 159 c
144.03999 159 181 163.70399 181 169.5 c
181 253.5 l
181 259.29599 144.03999 264 98.5 264 c
52.959999 264 16 259.29599 16 253.5 c
16 169.5 m
16 175.29601 52.959999 180 98.5 180 c
144.03999 180 181 175.29601 181 169.5 c
S
/Cs2 SC
0.98943001 0.95793998 0.86405998 sc
0 i
1 0 0 -1 107.5 244.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-24.208 11.75 m
(!"#$"#)[ 8.480000 8.400000 7.248000 8.640000 8.400000 0.000000 ] xS
/Cs1 SC
0.79607898 0.29411799 0.086274497 sc
CM
631 366.93051 m
631 376.87714 628.79022 378.10776 612.64819 387.95151 c
612.47772 388.05334 l
596.25049 398 596.08167 398 579.42816 398 c
557.2536 398 457 398 457 398 c
457 293 l
631 293 l
631 366.93051 l
h
631 366.93051 m
f
0.60000002 i
0.005495802 0.16865847 0.21176252 sc
1 0 0 -1 9 456 cm
622 89.069504 m
622 79.122849 619.79022 77.89225 603.64819 68.0485 c
603.47772 67.946648 l
587.25049 58 587.08167 58 570.42816 58 c
548.2536 58 448 58 448 58 c
448 163 l
622 163 l
622 89.069504 l
h
622 88.557098 m
622 79.122849 621.82947 79.122849 587.08167 79.122849 c
587.08167 79.122849 l
587.08167 58.102901 587.08167 58 571.44775 58 c
S
/Cs2 SC
0.98943001 0.95793998 0.86405998 sc
0 i
1 0 0 -1 544 345.5 cm
-34.391998 6.5 m
(%"&'\(\)\))[ 15.856000 8.400000 9.456000 3.360000 11.776000 9.888000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.86274499 0.196078 0.184314 sc
1 0 0 -1 9 456 cm
116 149 m
116 149 203.11139 71.763893 317 44 c
402.68338 23.112011 473.2103 37.616066 502.88788 46.081242 c
S
0 i
CM
522.53076 406.45465 m
513.1806 413.91486 l
510.58081 405.92731 l
h
522.53076 406.45465 m
f
0 J
0 j
1 0 0 -1 9 456 cm
513.53076 49.545338 m
504.18063 42.085133 l
501.58081 50.072681 l
h
513.53076 49.545338 m
S
1 J
1 j
0.60000002 i
0.14902 0.54509801 0.82352901 sc
533 44 m
533 44 437.38776 -5.4637203 315 24 c
218.24913 47.291878 140.73091 111.24977 112.50033 137.02261 c
S
0 i
CM
113.3998 311.24521 m
124.40143 315.94034 l
118.60149 322.01657 l
h
113.3998 311.24521 m
f
0 J
0 j
1 0 0 -1 9 456 cm
104.3998 144.75479 m
115.40143 140.05966 l
109.60149 133.98343 l
h
104.3998 144.75479 m
S
/Cs2 SC
0.12755001 0.46266001 0.78231001 sc
1 0 0 -1 490 468.86636 cm
-54.568001 6.5 m
(*++,'-"./"01)[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 9.728000 10.224000 8.400000 6.960000 0.000000 ] xS
0.81927001 0.10841 0.14146 sc
1 0 0 -1 245 325.5 cm
-60.599998 6.5 m
(*++,'-"0\)230")[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 7.120000 10.048000 9.648000 10.848000 7.120000 0.000000 ] xS
/Cs1 SC
0.52156919 0.6000104 0.0048197554 sc
CM
631 115.9305 m
631 125.87715 628.79022 127.10775 612.64819 136.95151 c
612.47772 137.05334 l
596.25049 147 596.08167 147 579.42816 147 c
557.2536 147 457 147 457 147 c
457 42 l
631 42 l
631 115.9305 l
h
631 115.9305 m
f
1 w
1 J
1 j
0.60000002 i
0.005495802 0.16865847 0.21176252 sc
1 0 0 -1 9 456 cm
622 340.06949 m
622 330.12286 619.79022 328.89224 603.64819 319.04849 c
603.47772 318.94666 l
587.25049 309 587.08167 309 570.42816 309 c
548.2536 309 448 309 448 309 c
448 414 l
622 414 l
622 340.06949 l
h
622 339.5571 m
622 330.12286 621.82947 330.12286 587.08167 330.12286 c
587.08167 330.12286 l
587.08167 309.10291 587.08167 309 571.44775 309 c
S
/Cs2 SC
0.98943001 0.95793998 0.86405998 sc
0 i
1 0 0 -1 544 94.5 cm
-31.504 6.5 m
(45!'\(\)\))[ 5.648000 13.808000 8.480000 3.360000 11.776000 9.888000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.86274499 0.196078 0.184314 sc
1 0 0 -1 9 456 cm
86 276 m
86 276 154.0625 395.91345 279 437.89801 c
378.02274 471.17407 475.86761 443.09479 512.19763 430.01465 c
S
0 i
CM
531.62585 30.084843 m
519.66571 29.896036 l
522.73895 22.078405 l
h
531.62585 30.084843 m
f
0 J
0 j
1 0 0 -1 9 456 cm
522.62585 425.91516 m
510.66574 426.10397 l
513.73895 433.9216 l
h
522.62585 425.91516 m
S
1 J
1 j
0.60000002 i
0.14902 0.54509801 0.82352901 sc
508 420 m
508 420 392.30515 460.92914 277 419 c
186.92912 386.24695 130.18138 314.9649 109.65704 285.33377 c
S
0 i
CM
112.55939 180.05798 m
115.13569 168.37711 l
122.18101 172.95134 l
h
112.55939 180.05798 m
f
0 J
0 j
1 0 0 -1 9 456 cm
103.55939 275.94202 m
106.13569 287.62289 l
113.18101 283.04868 l
h
103.55939 275.94202 m
S
/Cs2 SC
0.12755001 0.46266001 0.78231001 sc
1 0 0 -1 373 53.5 cm
-54.568001 6.5 m
(*++,'-"./"01)[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 9.728000 10.224000 8.400000 6.960000 0.000000 ] xS
0.81927001 0.10841 0.14146 sc
1 0 0 -1 66 117.5 cm
-60.599998 6.5 m
(*++,'-"0\)230")[ 14.416000 10.384000 10.384000 9.920000 4.000000 10.512000 8.400000 7.120000 10.048000 9.648000 10.848000 7.120000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
